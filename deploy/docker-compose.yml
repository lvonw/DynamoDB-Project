version: "3.9"

networks:
    backend:
        external: true

services:
  postgres_db:
    container_name: postgresdb
    image: postgres:13

    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "1234"
      POSTGRES_DB: "dvdrental"

    ports:
      - "5432:5432"
    networks:
      - "backend"

  postgres_seed:
      container_name: postgresseed
      image: postgres:13
      environment:
          POSTGRES_HOST_AUTH_METHOD: "trust"
          PGPASSWORD: "1234"
      volumes:
          - ./postgres/dvdrental.tar:/tmp/dvdrental.tar:ro
      entrypoint: [ "bash", "-c", "sleep 10 && pg_restore -h postgresdb -U postgres -d dvdrental /tmp/dvdrental.tar" ]
      restart: "no"
      networks:
        - "backend"
      depends_on:
        - "postgres_db"

  adminer:
    container_name: adminer
    image: adminer
    networks:
      - "backend"
    ports:
      - "${UI_PORT?}:8080"

  # ========== DYNAMODB ================================================
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
       - "./dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    networks:
      - "backend"
  # ========== DYNAMODB UI =============================================
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: "dynamodb admin"
    depends_on:
      - dynamodb-local
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: "http://dynamodb-local:8000"
      AWS_REGION: "us-west-2"
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
    networks:
      - "backend"
  # ====================================================================